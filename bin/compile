#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

BP_DIR=$(cd $(dirname $0); cd ..; pwd)
cp $BP_DIR/conf/* $1

export_env_dir() {
  env_dir=$3
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export

if [[ "$DATABASE_URL" =~ ^postgres://([^:@/]+):([^:@/]+)@([^:@/]+):([^:@/]+)/([^:@/]+)$ ]]; then
  dbuser=${BASH_REMATCH[1]}
  dbpass=${BASH_REMATCH[2]}
  dbhost=${BASH_REMATCH[3]}
  dbport=${BASH_REMATCH[4]}
  db=${BASH_REMATCH[5]}
fi

cat << _CONFIG_ > $1/mt-config.cgi
CGIPath /
StaticWebPath /mt-static
StaticFilePath /app/mt-static

ObjectDriver DBI::postgres
DBHost $dbhost
DBPort $dbport
DBUser $dbuser
DBPassword $dbpass
Database $db

DefaultLanguage ja

ImageDriver Imager
_CONFIG_

for BUILDPACK in $(cat $BP_DIR/bin/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

#    framework=$($dir/bin/detect $1)

#    if [ $? == 0 ]; then
#      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
#    fi
  fi
done

#if [ -e $1/last_pack_release.out ]; then
#  echo "Using release configuration from last framework ($framework)."
#fi
