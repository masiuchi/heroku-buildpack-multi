#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

BP_DIR=$(cd $(dirname $0); cd ..; pwd)

mkdir $1/.mt
mv $1/* $1/.mt/

cp $BP_DIR/conf/* $1
mkdir -p $1/addons/Heroku.pack
cp $BP_DIR/mt/addons/Heroku.pack/config.yaml $1/addons/Heroku.pack/

cp $BP_DIR/bin/*.sh $1
chmod +x $1/*.sh

if [ ! -d $1/local ]; then
  tar xzvf $BP_DIR/perl/local.tar.gz -C $1
fi

ls $1/local

for BUILDPACK in $(cat $BP_DIR/bin/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

#    framework=$($dir/bin/detect $1)

#    if [ $? == 0 ]; then
#      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
#    fi
  fi
done

#if [ -e $1/last_pack_release.out ]; then
#  echo "Using release configuration from last framework ($framework)."
#fi
